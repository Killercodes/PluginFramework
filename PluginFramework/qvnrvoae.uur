using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;

namespace PluginFramework
{
    public  class Invoker
    {
        private Dictionary<string, IPlugin> PluginsList = new Dictionary<string, IPlugin>();
        //private Dictionary<string, IPlugin> PluginsByEvent = new Dictionary<string, IPlugin>();
        private IPluginContext Context;

        public Invoker (ref IPluginContext pluginContext)
        {
            Context = pluginContext;

            LoadPlugins(AppDomain.CurrentDomain.BaseDirectory + "\\plugins");
        }
        //public Invoker () { }

        private void LoadPlugins(string folder)
        {
           
            foreach (string  dll in Directory.GetFiles(folder, "*.dll"))
            {
                Assembly assembly = Assembly.LoadFrom(dll);
                //find every type in each assembly that implements IPlugin
                foreach (Type type in assembly.GetTypes())
                {
                    if (type.GetInterfaces() == typeof(IPlugin))
                    {
                        IPlugin plugin = Activator.CreateInstance(type) as IPlugin;
                        PluginsList[plugin.Name] = (plugin);
                        //PluginsByEvent[plugin.Event] = (plugin);
                    }
                }
                assembly = null;
            }
        }

        public IPluginContext RunPluginByName (String pluginName)
        {
            IList<IPlugin> executionList = new List<IPlugin>();
            foreach (var p in PluginsList)
            {
                if (p.Value.Name.ToLower().Equals(pluginName))
                    executionList.Add(p.Value);
            }

            executionList = executionList.OrderBy(o => o.Order).ToList();

            foreach (IPlugin item in executionList)
            {
                item.Execute(ref Context);
            }

           // PluginsList[pluginName].Execute(ref Context);
            return Context;
        }
        public IPluginContext RunPluginOnEvent (String eventName)
        {
            IList<IPlugin> executionList = new List<IPlugin>();
            foreach (var p in PluginsList)
            {
                if (p.Value.Name.ToLower().Equals(eventName))
                    executionList.Add(p.Value);
            }

            executionList = executionList.OrderBy(o => o.Order).ToList();

            foreach (IPlugin item in executionList)
            {
                item.Execute(ref Context);
            }

            // PluginsList[pluginName].Execute(ref Context);
            return Context;
        }
    }

}
